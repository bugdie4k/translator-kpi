(in-package :translator-tests)

(defun extract-token-essentials (token-list)
  (mapcar (lambda (token) (list (token-lexem token) (token-type token) (token-line token) (token-column token))) token-list))

(defun get-full-test-pathname (testname)
  (merge-pathnames "/home/danylo/kpi/3/translators-marchenko/translator/tests/testfiles/" (pathname testname)))

(deftests test-lexer ()
  (correct1
   (extract-token-essentials (lexer (get-full-test-pathname "test-correct")))
   '(("PROGRAM" :PROGRAM 1 0)
     ("TESTCORRECT" :USER-DEFINED-IDENTIFIER 1 8)
     (";" :SEMICOLON 1 19) ("BEGIN" :BEGIN 3 0) ("LOOP" :LOOP 3 2)
     ("FOR" :FOR 4 4) ("I" :USER-DEFINED-IDENTIFIER 4 8)
     (":=" :ASSIGNMENT 4 10) ("-" :MINUS 4 13)
     ("(" :LEFT-PARENTHESIS 4 14) (1 :NUMBER-LITERAL 4 14)
     ("+" :PLUS 4 17) (2 :NUMBER-LITERAL 4 19)
     (")" :RIGHT-PARENTHESIS 4 20) ("*" :MULTIPLICATION 4 22)
     (3 :NUMBER-LITERAL 4 24) ("^" :POWER 4 25)
     (7 :NUMBER-LITERAL 4 26) ("TO" :TO 4 28)
     (1234 :NUMBER-LITERAL 4 31) ("^" :POWER 4 35)
     ("(" :LEFT-PARENTHESIS 4 36) (3 :NUMBER-LITERAL 4 36)
     ("^" :POWER 4 38) (2 :NUMBER-LITERAL 4 39)
     (")" :RIGHT-PARENTHESIS 4 40) ("DO" :DO 5 42) ("FOR" :FOR 10 8)
     ("J" :USER-DEFINED-IDENTIFIER 10 12) (":=" :ASSIGNMENT 10 14)
     (2 :NUMBER-LITERAL 10 17) ("+" :PLUS 10 18)
     (3456 :NUMBER-LITERAL 10 19) ("-" :MINUS 10 23)
     (1 :NUMBER-LITERAL 10 24) ("TO" :TO 10 26)
     ("I" :USER-DEFINED-IDENTIFIER 10 29) ("DO" :DO 11 31)
     ("FOR" :FOR 11 10)
     ("IDENTIFIER0" :USER-DEFINED-IDENTIFIER 11 14)
     (":=" :ASSIGNMENT 11 26)
     ("IDENTIFIER1" :USER-DEFINED-IDENTIFIER 11 29) ("TO" :TO 11 41)
     ("IDENTIFUER2" :USER-DEFINED-IDENTIFIER 11 44) ("DO" :DO 12 56)
     ("ENDFOR" :ENDFOR 12 10) (";" :SEMICOLON 12 16)
     ("ENDFOR" :ENDFOR 13 8) (";" :SEMICOLON 13 14)
     ("ENDFOR" :ENDFOR 14 4) (";" :SEMICOLON 14 10)
     ("ENDLOOP" :ENDLOOP 15 2) (";" :SEMICOLON 15 9)
     ("FOR" :FOR 16 2) ("K" :USER-DEFINED-IDENTIFIER 16 6)
     (":=" :ASSIGNMENT 16 8) ("V0" :USER-DEFINED-IDENTIFIER 16 11)
     ("^" :POWER 16 13) ("V1" :USER-DEFINED-IDENTIFIER 16 14)
     ("^" :POWER 16 16) ("V2" :USER-DEFINED-IDENTIFIER 16 17)
     ("*" :MULTIPLICATION 16 19) (321 :NUMBER-LITERAL 16 20)
     ("-" :MINUS 16 23) ("V3" :USER-DEFINED-IDENTIFIER 16 24)
     ("TO" :TO 16 27) ("V1" :USER-DEFINED-IDENTIFIER 16 30)
     ("-" :MINUS 16 32) ("V2" :USER-DEFINED-IDENTIFIER 16 33)
     ("DO" :DO 17 36) ("LOOP" :LOOP 18 6) ("ENDLOOP" :ENDLOOP 18 6)
     (";" :SEMICOLON 18 13) ("ENDFOR" :ENDFOR 19 2)
     (";" :SEMICOLON 19 8) ("END" :END 20 0) ("." :FULL-STOP 20 3)))
  (correct2
   (extract-token-essentials (lexer (get-full-test-pathname "test-correct2")))
   '(("PROGRAM" :PROGRAM 1 0)
     ("TESTCORRECT2" :USER-DEFINED-IDENTIFIER 1 8)
     (";" :SEMICOLON 1 20) ("BEGIN" :BEGIN 3 0) ("LOOP" :LOOP 3 2)
     ("FOR" :FOR 4 4) ("I" :USER-DEFINED-IDENTIFIER 4 8)
     (":=" :ASSIGNMENT 4 10) (1 :NUMBER-LITERAL 4 13)
     ("TO" :TO 4 15) (2 :NUMBER-LITERAL 4 18) ("DO" :DO 5 20)
     ("FOR" :FOR 5 8) ("J" :USER-DEFINED-IDENTIFIER 5 12)
     (":=" :ASSIGNMENT 5 14) (1 :NUMBER-LITERAL 5 17)
     ("+" :PLUS 5 18) (2 :NUMBER-LITERAL 5 19) ("TO" :TO 5 21)
     ("I" :USER-DEFINED-IDENTIFIER 5 24) ("DO" :DO 6 26)
     ("FOR" :FOR 6 10) ("K0" :USER-DEFINED-IDENTIFIER 6 14)
     (":=" :ASSIGNMENT 6 17) ("A" :USER-DEFINED-IDENTIFIER 6 20)
     ("TO" :TO 6 22) (2 :NUMBER-LITERAL 6 25)
     ("*" :MULTIPLICATION 6 26) (3 :NUMBER-LITERAL 6 27)
     ("DO" :DO 7 29) ("ENDFOR" :ENDFOR 7 10) (";" :SEMICOLON 7 16)
     ("FOR" :FOR 8 10) ("K1" :USER-DEFINED-IDENTIFIER 8 14)
     (":=" :ASSIGNMENT 8 17) ("A1" :USER-DEFINED-IDENTIFIER 8 20)
     ("TO" :TO 8 23) (2 :NUMBER-LITERAL 8 26)
     ("*" :MULTIPLICATION 8 27) (3 :NUMBER-LITERAL 8 28)
     ("DO" :DO 9 30) ("ENDFOR" :ENDFOR 9 10) (";" :SEMICOLON 9 16)
     ("FOR" :FOR 10 10) ("K2" :USER-DEFINED-IDENTIFIER 10 14)
     (":=" :ASSIGNMENT 10 17) ("A2" :USER-DEFINED-IDENTIFIER 10 20)
     ("TO" :TO 10 23) (2 :NUMBER-LITERAL 10 26)
     ("*" :MULTIPLICATION 10 27) (3 :NUMBER-LITERAL 10 28)
     ("DO" :DO 11 30) ("ENDFOR" :ENDFOR 11 10)
     (";" :SEMICOLON 11 16) ("LOOP" :LOOP 13 10)
     ("ENDLOOP" :ENDLOOP 13 10) (";" :SEMICOLON 13 17)
     ("ENDFOR" :ENDFOR 14 8) (";" :SEMICOLON 14 14)
     ("ENDFOR" :ENDFOR 15 4) (";" :SEMICOLON 15 10)
     ("ENDLOOP" :ENDLOOP 16 2) (";" :SEMICOLON 16 9)
     ("FOR" :FOR 17 2) ("K" :USER-DEFINED-IDENTIFIER 17 6)
     (":=" :ASSIGNMENT 17 8) ("L" :USER-DEFINED-IDENTIFIER 17 11)
     ("*" :MULTIPLICATION 17 12) (2 :NUMBER-LITERAL 17 13)
     ("/" :DIVISION 17 14) (34 :NUMBER-LITERAL 17 15)
     ("TO" :TO 17 18) (45 :NUMBER-LITERAL 17 21)
     ("/" :DIVISION 17 23) ("M" :USER-DEFINED-IDENTIFIER 17 24)
     ("DO" :DO 18 26) ("LOOP" :LOOP 19 6) ("ENDLOOP" :ENDLOOP 19 6)
     (";" :SEMICOLON 19 13) ("ENDFOR" :ENDFOR 20 2)
     (";" :SEMICOLON 20 8) ("LOOP" :LOOP 22 2)
     ("ENDLOOP" :ENDLOOP 22 2) (";" :SEMICOLON 22 9)
     ("FOR" :FOR 23 2) ("C" :USER-DEFINED-IDENTIFIER 23 6)
     (":=" :ASSIGNMENT 23 8) ("C1" :USER-DEFINED-IDENTIFIER 23 11)
     ("TO" :TO 23 14) ("C2" :USER-DEFINED-IDENTIFIER 23 17)
     ("DO" :DO 24 20) ("ENDFOR" :ENDFOR 24 2) (";" :SEMICOLON 24 8)
     ("END" :END 25 0) ("." :FULL-STOP 25 3)))
  (correct3
   (extract-token-essentials (lexer (get-full-test-pathname "test-correct3")))
   '(("PROGRAM" :PROGRAM 1 0)
     ("TESTCORRECT3" :USER-DEFINED-IDENTIFIER 1 8)
     (";" :SEMICOLON 1 20) ("BEGIN" :BEGIN 3 0) ("FOR" :FOR 3 2)
     ("A" :USER-DEFINED-IDENTIFIER 3 6) (":=" :ASSIGNMENT 3 8)
     (1 :NUMBER-LITERAL 3 11) ("TO" :TO 3 13)
     (2 :NUMBER-LITERAL 3 16) ("DO" :DO 4 18) ("LOOP" :LOOP 4 6)
     ("ENDLOOP" :ENDLOOP 4 11) (";" :SEMICOLON 4 18)
     ("FOR" :FOR 5 6) ("G" :USER-DEFINED-IDENTIFIER 5 10)
     (":=" :ASSIGNMENT 5 12) (1 :NUMBER-LITERAL 5 15)
     ("TO" :TO 5 17) (2 :NUMBER-LITERAL 5 20) ("DO" :DO 6 22)
     ("ENDFOR" :ENDFOR 6 6) (";" :SEMICOLON 6 12) ("FOR" :FOR 7 6)
     ("H" :USER-DEFINED-IDENTIFIER 7 10) (":=" :ASSIGNMENT 7 12)
     (3 :NUMBER-LITERAL 7 15) ("TO" :TO 7 17)
     (4 :NUMBER-LITERAL 7 20) ("DO" :DO 8 22) ("ENDFOR" :ENDFOR 8 6)
     (";" :SEMICOLON 8 12) ("ENDFOR" :ENDFOR 9 2)
     (";" :SEMICOLON 9 8) ("FOR" :FOR 10 2)
     ("B" :USER-DEFINED-IDENTIFIER 10 6) (":=" :ASSIGNMENT 10 8)
     (3 :NUMBER-LITERAL 10 11) ("TO" :TO 10 13)
     (4 :NUMBER-LITERAL 10 16) ("DO" :DO 11 18)
     ("ENDFOR" :ENDFOR 11 2) (";" :SEMICOLON 11 8) ("FOR" :FOR 12 2)
     ("E" :USER-DEFINED-IDENTIFIER 12 6) (":=" :ASSIGNMENT 12 8)
     (7 :NUMBER-LITERAL 12 11) ("TO" :TO 12 13)
     (8 :NUMBER-LITERAL 12 16) ("DO" :DO 13 18)
     ("ENDFOR" :ENDFOR 13 2) (";" :SEMICOLON 13 8) ("FOR" :FOR 14 2)
     ("F" :USER-DEFINED-IDENTIFIER 14 6) (":=" :ASSIGNMENT 14 8)
     (9 :NUMBER-LITERAL 14 11) ("TO" :TO 14 13)
     (10 :NUMBER-LITERAL 14 16) ("DO" :DO 15 19)
     ("ENDFOR" :ENDFOR 15 2) (";" :SEMICOLON 15 8) ("END" :END 16 0)
     ("." :FULL-STOP 16 3)))
  (error-one-char
   (handler-case (lexer (get-full-test-pathname "test-lexer-error-one-char"))
     (translator-lexer::wrong-character (e) (print-object e nil)))
   "This character is not allowed.
character: &
line: 3
column: 3
")
  (error-assignment-operator
   (handler-case (lexer (get-full-test-pathname "test-lexer-error-assignment-operator"))
     (translator-lexer::wrong-character (e) (print-object e nil)))
   "Assignment operator is expected because of colon character. Second character must be an equals sign: =.
character: 3
line: 4
column: 11
")
  (error-empty-file
   (handler-case (lexer (get-full-test-pathname "test-lexer-error-empty-file"))
     (translator-lexer::empty-file (e) (print-object e nil)))
   "This file is empty.
file: /home/danylo/kpi/3/translators-marchenko/translator/tests/testfiles/test-lexer-error-empty-file
")
  (error-unexpected-eof1
   (handler-case (lexer (get-full-test-pathname "test-lexer-error-unexpected-eof1"))
     (translator-lexer::wrong-character (e) (print-object e nil)))
   "Unexpected end of file at the following position.
character: EOF
line: 15
column: 4
")
  (error-unexpected-eof2
   (handler-case (lexer (get-full-test-pathname "test-lexer-error-unexpected-eof2"))
     (translator-lexer::wrong-character (e) (print-object e nil)))
   "Unexpected end of file at the following position.
character: EOF
line: 14
column: 10
"))
